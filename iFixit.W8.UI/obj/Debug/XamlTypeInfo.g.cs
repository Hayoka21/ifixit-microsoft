//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



namespace iFixit.W8.UI
{
    public partial class App : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
        private global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlTypeInfoProvider _provider;

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            if(_provider == null)
            {
                _provider = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByType(type);
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.String fullName)
        {
            if(_provider == null)
            {
                _provider = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByName(fullName);
        }

        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }
}

namespace iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo
{
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            string standardName;
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            if(_xamlTypeToStandardName.TryGetValue(type, out standardName))
            {
                xamlType = GetXamlTypeByName(standardName);
            }
            else
            {
                xamlType = GetXamlTypeByName(type.FullName);
            }
            if(xamlType == null)
            {
                xamlType = CheckOtherMetadataProvidersForType(type);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (global::System.String.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypes.TryGetValue(typeName, out xamlType))
            {
                return xamlType;
            }
            xamlType = CreateXamlType(typeName);
            if (xamlType == null)
            {
                xamlType = CheckOtherMetadataProvidersForName(typeName);
            }
            if (xamlType != null)
            {
                _xamlTypes.Add(typeName, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (global::System.String.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
            {
                return xamlMember;
            }
            xamlMember = CreateXamlMember(longMemberName);
            if (xamlMember != null)
            {
                _xamlMembers.Add(longMemberName, xamlMember);
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType> _xamlTypes = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();
        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember> _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();
        global::System.Collections.Generic.Dictionary<global::System.Type, string> _xamlTypeToStandardName = new global::System.Collections.Generic.Dictionary<global::System.Type, string>();

        private void AddToMapOfTypeToStandardName(global::System.Type t, global::System.String str)
        {
            if(!_xamlTypeToStandardName.ContainsKey(t))
            {
                _xamlTypeToStandardName.Add(t, str);
            }
        }

        private object Activate_0_StringToVisibilityConverter() { return new global::Coding4Fun.Toolkit.Controls.Converters.StringToVisibilityConverter(); }

        private object Activate_2_NegativeStringToVisibilityConverter() { return new global::iFixit.UI.Shared.NegativeStringToVisibilityConverter(); }

        private object Activate_3_BooleanToVisibilityConverter() { return new global::iFixit.UI.Shared.BooleanToVisibilityConverter(); }

        private object Activate_4_NegativeBooleanToVisibilityConverter() { return new global::iFixit.UI.Shared.NegativeBooleanToVisibilityConverter(); }

        private object Activate_5_SubStringConverter() { return new global::iFixit.UI.Shared.SubStringConverter(); }

        private object Activate_6_UpperConverter() { return new global::iFixit.UI.Shared.UpperConverter(); }

        private object Activate_7_TextIdentConverter() { return new global::iFixit.UI.Shared.TextIdentConverter(); }

        private object Activate_8_IconConverter() { return new global::iFixit.UI.Shared.IconConverter(); }

        private object Activate_9_IconVisibilityConverter() { return new global::iFixit.UI.Shared.IconVisibilityConverter(); }

        private object Activate_10_ViewModelLocator() { return new global::iFixit.W8.UI.ViewModels.ViewModelLocator(); }

        private object Activate_12_BaseViewModel() { return new global::iFixit.Domain.ViewModels.BaseViewModel(); }

        private object Activate_13_ModelBase() { return new global::iFixit.Domain.Models.ModelBase(); }

        private object Activate_21_LabelsManager() { return new global::iFixit.Domain.Models.UI.LabelsManager(); }

        private object Activate_22_PublicInternational() { return new global::iFixit.International.PublicInternational(); }

        private object Activate_26_SuperImage() { return new global::Coding4Fun.Toolkit.Controls.SuperImage(); }

        private object Activate_27_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::Coding4Fun.Toolkit.Controls.SuperImageSource>(); }

        private object Activate_28_Collection() { return new global::System.Collections.ObjectModel.Collection<global::Coding4Fun.Toolkit.Controls.SuperImageSource>(); }

        private object Activate_29_SuperImageSource() { return new global::Coding4Fun.Toolkit.Controls.SuperImageSource(); }

        private object Activate_36_EventToCommandManager() { return new global::MetroEventToCommand.EventToCommandManager(); }

        private object Activate_37_EventToCommandCollection() { return new global::MetroEventToCommand.EventToCommandCollection(); }

        private object Activate_38_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::MetroEventToCommand.EventToCommand>(); }

        private object Activate_39_Collection() { return new global::System.Collections.ObjectModel.Collection<global::MetroEventToCommand.EventToCommand>(); }

        private object Activate_40_EventToCommand() { return new global::MetroEventToCommand.EventToCommand(); }

        private object Activate_42_BasePage() { return new global::iFixit.W8.UI.Common.BasePage(); }

        private object Activate_43_LayoutAwarePage() { return new global::iFixit.W8.UI.Common.LayoutAwarePage(); }

        private object Activate_44_GuidePageSelector() { return new global::iFixit.UI.Shared.GuidePageSelector(); }

        private object Activate_45_Properties() { return new global::iFixit.UI.Shared.Properties(); }

        private object Activate_46_TopMenuWithSubTitle() { return new global::iFixit.W8.UI.Views.UC.TopMenuWithSubTitle(); }

        private object Activate_47_ProgressBar() { return new global::iFixit.W8.UI.Views.UC.ProgressBar(); }

        private object Activate_48_GuideDetails() { return new global::iFixit.W8.UI.Views.GuideDetails(); }

        private object Activate_49_BreadCrumbCategories() { return new global::iFixit.W8.UI.Views.UC.BreadCrumbCategories(); }

        private object Activate_50_LoadingRing() { return new global::iFixit.W8.UI.Views.UC.LoadingRing(); }

        private object Activate_51_News() { return new global::iFixit.W8.UI.Views.UC.News(); }

        private object Activate_52_Support() { return new global::iFixit.W8.UI.Views.UC.Support(); }

        private object Activate_53_TopMenu() { return new global::iFixit.W8.UI.Views.UC.TopMenu(); }

        private object Activate_54_VariableGridView() { return new global::iFixit.UI.Shared.VariableGridView(); }

        private object Activate_55_Device() { return new global::iFixit.W8.UI.Views.Device(); }

        private object Activate_57_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::System.Object>(); }

        private object Activate_58_Collection() { return new global::System.Collections.ObjectModel.Collection<global::System.Object>(); }

        private object Activate_61_Home() { return new global::iFixit.W8.UI.Views.Home(); }

        private object Activate_62_SearchResult() { return new global::iFixit.W8.UI.Views.SearchResult(); }

        private object Activate_63_SubCategory() { return new global::iFixit.W8.UI.Views.SubCategory(); }

        private object Activate_64_About() { return new global::iFixit.W8.UI.Views.UC.About(); }

        private object Activate_65_WatermarkTextBox() { return new global::WinRTXamlToolkit.Controls.WatermarkTextBox(); }

        private object Activate_66_WatermarkPasswordBox() { return new global::WinRTXamlToolkit.Controls.WatermarkPasswordBox(); }

        private object Activate_67_Login() { return new global::iFixit.W8.UI.Views.UC.Login(); }

        private object Activate_68_Mission() { return new global::iFixit.W8.UI.Views.UC.Mission(); }

        private object Activate_69_Profile() { return new global::iFixit.W8.UI.Views.UC.Profile(); }

        private void VectorAdd_27_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Coding4Fun.Toolkit.Controls.SuperImageSource>)instance;
            var newItem = (global::Coding4Fun.Toolkit.Controls.SuperImageSource)item;
            collection.Add(newItem);
        }

        private void VectorAdd_28_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Coding4Fun.Toolkit.Controls.SuperImageSource>)instance;
            var newItem = (global::Coding4Fun.Toolkit.Controls.SuperImageSource)item;
            collection.Add(newItem);
        }

        private void VectorAdd_37_EventToCommandCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::MetroEventToCommand.EventToCommand>)instance;
            var newItem = (global::MetroEventToCommand.EventToCommand)item;
            collection.Add(newItem);
        }

        private void VectorAdd_38_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::MetroEventToCommand.EventToCommand>)instance;
            var newItem = (global::MetroEventToCommand.EventToCommand)item;
            collection.Add(newItem);
        }

        private void VectorAdd_39_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::MetroEventToCommand.EventToCommand>)instance;
            var newItem = (global::MetroEventToCommand.EventToCommand)item;
            collection.Add(newItem);
        }

        private void VectorAdd_57_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::System.Object>)instance;
            var newItem = (global::System.Object)item;
            collection.Add(newItem);
        }

        private void VectorAdd_58_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::System.Object>)instance;
            var newItem = (global::System.Object)item;
            collection.Add(newItem);
        }


        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(string typeName)
        {
            global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType userType;

            switch (typeName)
            {
            case "Object":
                xamlType = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::System.Object));
                break;

            case "Boolean":
                xamlType = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::System.Boolean));
                break;

            case "Windows.UI.Xaml.Controls.Control":
                xamlType = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.Control));
                break;

            case "Windows.UI.Xaml.Media.Stretch":
                xamlType = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Media.Stretch));
                break;

            case "Windows.UI.Xaml.Media.ImageSource":
                xamlType = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Media.ImageSource));
                break;

            case "Windows.UI.Xaml.DependencyObject":
                xamlType = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.DependencyObject));
                break;

            case "Int32":
                xamlType = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::System.Int32));
                break;

            case "Double":
                xamlType = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::System.Double));
                break;

            case "Windows.UI.Xaml.Media.SolidColorBrush":
                xamlType = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Media.SolidColorBrush));
                break;

            case "String":
                xamlType = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::System.String));
                break;

            case "Windows.UI.Xaml.FrameworkElement":
                xamlType = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.FrameworkElement));
                break;

            case "Windows.UI.Xaml.Controls.Page":
                xamlType = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.Page));
                break;

            case "Windows.UI.Xaml.Controls.UserControl":
                xamlType = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.UserControl));
                break;

            case "Windows.UI.Xaml.Controls.DataTemplateSelector":
                xamlType = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.DataTemplateSelector));
                break;

            case "Windows.UI.Xaml.DataTemplate":
                xamlType = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.DataTemplate));
                break;

            case "Windows.UI.Xaml.Controls.GridView":
                xamlType = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.GridView));
                break;

            case "Windows.UI.Xaml.Controls.ItemsControl":
                xamlType = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.ItemsControl));
                break;

            case "Windows.UI.Xaml.Controls.TextBox":
                xamlType = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.TextBox));
                break;

            case "Windows.UI.Xaml.Style":
                xamlType = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Style));
                break;

            case "Coding4Fun.Toolkit.Controls.Converters.StringToVisibilityConverter":
                userType = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Coding4Fun.Toolkit.Controls.Converters.StringToVisibilityConverter), GetXamlTypeByName("Coding4Fun.Toolkit.Controls.Converters.ValueConverter"));
                userType.Activator = Activate_0_StringToVisibilityConverter;
                userType.AddMemberName("Inverted");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                xamlType = userType;
                break;

            case "Coding4Fun.Toolkit.Controls.Converters.ValueConverter":
                userType = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Coding4Fun.Toolkit.Controls.Converters.ValueConverter), GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case "iFixit.UI.Shared.NegativeStringToVisibilityConverter":
                userType = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::iFixit.UI.Shared.NegativeStringToVisibilityConverter), GetXamlTypeByName("Object"));
                userType.Activator = Activate_2_NegativeStringToVisibilityConverter;
                xamlType = userType;
                break;

            case "iFixit.UI.Shared.BooleanToVisibilityConverter":
                userType = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::iFixit.UI.Shared.BooleanToVisibilityConverter), GetXamlTypeByName("Object"));
                userType.Activator = Activate_3_BooleanToVisibilityConverter;
                xamlType = userType;
                break;

            case "iFixit.UI.Shared.NegativeBooleanToVisibilityConverter":
                userType = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::iFixit.UI.Shared.NegativeBooleanToVisibilityConverter), GetXamlTypeByName("Object"));
                userType.Activator = Activate_4_NegativeBooleanToVisibilityConverter;
                xamlType = userType;
                break;

            case "iFixit.UI.Shared.SubStringConverter":
                userType = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::iFixit.UI.Shared.SubStringConverter), GetXamlTypeByName("Object"));
                userType.Activator = Activate_5_SubStringConverter;
                xamlType = userType;
                break;

            case "iFixit.UI.Shared.UpperConverter":
                userType = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::iFixit.UI.Shared.UpperConverter), GetXamlTypeByName("Object"));
                userType.Activator = Activate_6_UpperConverter;
                xamlType = userType;
                break;

            case "iFixit.UI.Shared.TextIdentConverter":
                userType = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::iFixit.UI.Shared.TextIdentConverter), GetXamlTypeByName("Object"));
                userType.Activator = Activate_7_TextIdentConverter;
                xamlType = userType;
                break;

            case "iFixit.UI.Shared.IconConverter":
                userType = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::iFixit.UI.Shared.IconConverter), GetXamlTypeByName("Object"));
                userType.Activator = Activate_8_IconConverter;
                xamlType = userType;
                break;

            case "iFixit.UI.Shared.IconVisibilityConverter":
                userType = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::iFixit.UI.Shared.IconVisibilityConverter), GetXamlTypeByName("Object"));
                userType.Activator = Activate_9_IconVisibilityConverter;
                xamlType = userType;
                break;

            case "iFixit.W8.UI.ViewModels.ViewModelLocator":
                userType = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::iFixit.W8.UI.ViewModels.ViewModelLocator), GetXamlTypeByName("Object"));
                userType.Activator = Activate_10_ViewModelLocator;
                userType.AddMemberName("Home");
                userType.AddMemberName("Guide");
                userType.AddMemberName("Device");
                userType.AddMemberName("Search");
                userType.AddMemberName("About");
                userType.AddMemberName("SubCategories");
                userType.AddMemberName("Login");
                userType.AddMemberName("Profile");
                xamlType = userType;
                break;

            case "iFixit.Domain.ViewModels.Home":
                userType = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::iFixit.Domain.ViewModels.Home), GetXamlTypeByName("iFixit.Domain.ViewModels.BaseViewModel"));
                xamlType = userType;
                break;

            case "iFixit.Domain.ViewModels.BaseViewModel":
                userType = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::iFixit.Domain.ViewModels.BaseViewModel), GetXamlTypeByName("iFixit.Domain.Models.ModelBase"));
                userType.Activator = Activate_12_BaseViewModel;
                xamlType = userType;
                break;

            case "iFixit.Domain.Models.ModelBase":
                userType = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::iFixit.Domain.Models.ModelBase), GetXamlTypeByName("Object"));
                userType.Activator = Activate_13_ModelBase;
                xamlType = userType;
                break;

            case "iFixit.Domain.ViewModels.Guide":
                userType = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::iFixit.Domain.ViewModels.Guide), GetXamlTypeByName("iFixit.Domain.ViewModels.BaseViewModel"));
                xamlType = userType;
                break;

            case "iFixit.Domain.ViewModels.Device":
                userType = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::iFixit.Domain.ViewModels.Device), GetXamlTypeByName("iFixit.Domain.ViewModels.BaseViewModel"));
                xamlType = userType;
                break;

            case "iFixit.Domain.ViewModels.Search":
                userType = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::iFixit.Domain.ViewModels.Search), GetXamlTypeByName("iFixit.Domain.ViewModels.BaseViewModel"));
                xamlType = userType;
                break;

            case "iFixit.Domain.ViewModels.About":
                userType = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::iFixit.Domain.ViewModels.About), GetXamlTypeByName("iFixit.Domain.ViewModels.BaseViewModel"));
                xamlType = userType;
                break;

            case "iFixit.Domain.ViewModels.SubCategories":
                userType = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::iFixit.Domain.ViewModels.SubCategories), GetXamlTypeByName("iFixit.Domain.ViewModels.BaseViewModel"));
                xamlType = userType;
                break;

            case "iFixit.Domain.ViewModels.Login":
                userType = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::iFixit.Domain.ViewModels.Login), GetXamlTypeByName("iFixit.Domain.ViewModels.BaseViewModel"));
                xamlType = userType;
                break;

            case "iFixit.Domain.ViewModels.Profile":
                userType = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::iFixit.Domain.ViewModels.Profile), GetXamlTypeByName("iFixit.Domain.ViewModels.BaseViewModel"));
                xamlType = userType;
                break;

            case "iFixit.Domain.Models.UI.LabelsManager":
                userType = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::iFixit.Domain.Models.UI.LabelsManager), GetXamlTypeByName("iFixit.Domain.Models.ModelBase"));
                userType.Activator = Activate_21_LabelsManager;
                userType.AddMemberName("Labels");
                xamlType = userType;
                break;

            case "iFixit.International.PublicInternational":
                userType = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::iFixit.International.PublicInternational), GetXamlTypeByName("Object"));
                userType.Activator = Activate_22_PublicInternational;
                xamlType = userType;
                break;

            case "Windows.UI.Color":
                userType = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Windows.UI.Color), GetXamlTypeByName("System.ValueType"));
                userType.AddMemberName("A");
                AddToMapOfTypeToStandardName(typeof(global::System.Byte),
                                                   "Byte");
                userType.AddMemberName("B");
                AddToMapOfTypeToStandardName(typeof(global::System.Byte),
                                                   "Byte");
                userType.AddMemberName("G");
                AddToMapOfTypeToStandardName(typeof(global::System.Byte),
                                                   "Byte");
                userType.AddMemberName("R");
                AddToMapOfTypeToStandardName(typeof(global::System.Byte),
                                                   "Byte");
                xamlType = userType;
                break;

            case "System.ValueType":
                userType = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.ValueType), GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case "Byte":
                userType = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Byte), GetXamlTypeByName("System.ValueType"));
                AddToMapOfTypeToStandardName(typeof(global::System.Byte),
                                                   "Byte");
                xamlType = userType;
                break;

            case "Coding4Fun.Toolkit.Controls.SuperImage":
                userType = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Coding4Fun.Toolkit.Controls.SuperImage), GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_26_SuperImage;
                userType.AddMemberName("PlaceholderImageStretch");
                userType.AddMemberName("PlaceholderImageSource");
                userType.AddMemberName("Source");
                userType.AddMemberName("Stretch");
                userType.AddMemberName("Sources");
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Coding4Fun.Toolkit.Controls.SuperImageSource>),
                                                   "System.Collections.ObjectModel.ObservableCollection<Coding4Fun.Toolkit.Controls.SuperImageSource>");
                userType.AddMemberName("PlaceholderOpacity");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("PlaceholderBackground");
                xamlType = userType;
                break;

            case "System.Collections.ObjectModel.ObservableCollection<Coding4Fun.Toolkit.Controls.SuperImageSource>":
                userType = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Coding4Fun.Toolkit.Controls.SuperImageSource>), GetXamlTypeByName("System.Collections.ObjectModel.Collection<Coding4Fun.Toolkit.Controls.SuperImageSource>"));
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Coding4Fun.Toolkit.Controls.SuperImageSource>),
                                                   "System.Collections.ObjectModel.ObservableCollection<Coding4Fun.Toolkit.Controls.SuperImageSource>");
                userType.Activator = Activate_27_ObservableCollection;
                userType.CollectionAdd = VectorAdd_27_ObservableCollection;
                xamlType = userType;
                break;

            case "System.Collections.ObjectModel.Collection<Coding4Fun.Toolkit.Controls.SuperImageSource>":
                userType = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Collections.ObjectModel.Collection<global::Coding4Fun.Toolkit.Controls.SuperImageSource>), GetXamlTypeByName("Object"));
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.ObjectModel.Collection<global::Coding4Fun.Toolkit.Controls.SuperImageSource>),
                                                   "System.Collections.ObjectModel.Collection<Coding4Fun.Toolkit.Controls.SuperImageSource>");
                userType.Activator = Activate_28_Collection;
                userType.CollectionAdd = VectorAdd_28_Collection;
                xamlType = userType;
                break;

            case "Coding4Fun.Toolkit.Controls.SuperImageSource":
                userType = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Coding4Fun.Toolkit.Controls.SuperImageSource), GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.Activator = Activate_29_SuperImageSource;
                userType.AddMemberName("MinScale");
                AddToMapOfTypeToStandardName(typeof(global::System.Int32),
                                                   "Int32");
                userType.AddMemberName("MaxScale");
                AddToMapOfTypeToStandardName(typeof(global::System.Int32),
                                                   "Int32");
                userType.AddMemberName("Source");
                userType.AddMemberName("IsDefault");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                xamlType = userType;
                break;

            case "WinRTXamlToolkit.Controls.Extensions.ImageExtensions":
                userType = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::WinRTXamlToolkit.Controls.Extensions.ImageExtensions), GetXamlTypeByName("Object"));
                userType.AddMemberName("FadeInOnLoaded");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("ImageLoadedTransitionType");
                userType.AddMemberName("FadeInOnLoadedHandler");
                userType.AddMemberName("Source");
                AddToMapOfTypeToStandardName(typeof(global::System.Object),
                                                   "Object");
                userType.AddMemberName("CustomSource");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                xamlType = userType;
                break;

            case "WinRTXamlToolkit.Controls.Extensions.ImageLoadedTransitionTypes":
                userType = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::WinRTXamlToolkit.Controls.Extensions.ImageLoadedTransitionTypes), GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("FadeIn", global::WinRTXamlToolkit.Controls.Extensions.ImageLoadedTransitionTypes.FadeIn);
                userType.AddEnumValue("SlideUp", global::WinRTXamlToolkit.Controls.Extensions.ImageLoadedTransitionTypes.SlideUp);
                userType.AddEnumValue("SlideLeft", global::WinRTXamlToolkit.Controls.Extensions.ImageLoadedTransitionTypes.SlideLeft);
                userType.AddEnumValue("SlideDown", global::WinRTXamlToolkit.Controls.Extensions.ImageLoadedTransitionTypes.SlideDown);
                userType.AddEnumValue("SlideRight", global::WinRTXamlToolkit.Controls.Extensions.ImageLoadedTransitionTypes.SlideRight);
                userType.AddEnumValue("Random", global::WinRTXamlToolkit.Controls.Extensions.ImageLoadedTransitionTypes.Random);
                xamlType = userType;
                break;

            case "System.Enum":
                userType = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Enum), GetXamlTypeByName("System.ValueType"));
                xamlType = userType;
                break;

            case "WinRTXamlToolkit.Controls.Extensions.FadeInOnLoadedHandler":
                userType = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::WinRTXamlToolkit.Controls.Extensions.FadeInOnLoadedHandler), GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case "Q42.WinRT.Controls.ImageExtensions":
                userType = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Q42.WinRT.Controls.ImageExtensions), GetXamlTypeByName("Object"));
                userType.AddMemberName("CacheUri");
                xamlType = userType;
                break;

            case "System.Uri":
                userType = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Uri), GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case "MetroEventToCommand.EventToCommandManager":
                userType = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::MetroEventToCommand.EventToCommandManager), GetXamlTypeByName("Object"));
                userType.Activator = Activate_36_EventToCommandManager;
                userType.AddMemberName("Collection");
                userType.AddMemberName("CollectionPropertyInternal");
                xamlType = userType;
                break;

            case "MetroEventToCommand.EventToCommandCollection":
                userType = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::MetroEventToCommand.EventToCommandCollection), GetXamlTypeByName("System.Collections.ObjectModel.ObservableCollection<MetroEventToCommand.EventToCommand>"));
                userType.Activator = Activate_37_EventToCommandCollection;
                userType.CollectionAdd = VectorAdd_37_EventToCommandCollection;
                xamlType = userType;
                break;

            case "System.Collections.ObjectModel.ObservableCollection<MetroEventToCommand.EventToCommand>":
                userType = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Collections.ObjectModel.ObservableCollection<global::MetroEventToCommand.EventToCommand>), GetXamlTypeByName("System.Collections.ObjectModel.Collection<MetroEventToCommand.EventToCommand>"));
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.ObjectModel.ObservableCollection<global::MetroEventToCommand.EventToCommand>),
                                                   "System.Collections.ObjectModel.ObservableCollection<MetroEventToCommand.EventToCommand>");
                userType.Activator = Activate_38_ObservableCollection;
                userType.CollectionAdd = VectorAdd_38_ObservableCollection;
                xamlType = userType;
                break;

            case "System.Collections.ObjectModel.Collection<MetroEventToCommand.EventToCommand>":
                userType = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Collections.ObjectModel.Collection<global::MetroEventToCommand.EventToCommand>), GetXamlTypeByName("Object"));
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.ObjectModel.Collection<global::MetroEventToCommand.EventToCommand>),
                                                   "System.Collections.ObjectModel.Collection<MetroEventToCommand.EventToCommand>");
                userType.Activator = Activate_39_Collection;
                userType.CollectionAdd = VectorAdd_39_Collection;
                xamlType = userType;
                break;

            case "MetroEventToCommand.EventToCommand":
                userType = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::MetroEventToCommand.EventToCommand), GetXamlTypeByName("Windows.UI.Xaml.FrameworkElement"));
                userType.Activator = Activate_40_EventToCommand;
                userType.AddMemberName("Command");
                userType.AddMemberName("CommandParameter");
                AddToMapOfTypeToStandardName(typeof(global::System.Object),
                                                   "Object");
                userType.AddMemberName("Event");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("HandleEvent");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("Element");
                xamlType = userType;
                break;

            case "System.Windows.Input.ICommand":
                userType = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Windows.Input.ICommand), null);
                xamlType = userType;
                break;

            case "iFixit.W8.UI.Common.BasePage":
                userType = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::iFixit.W8.UI.Common.BasePage), GetXamlTypeByName("iFixit.W8.UI.Common.LayoutAwarePage"));
                userType.Activator = Activate_42_BasePage;
                xamlType = userType;
                break;

            case "iFixit.W8.UI.Common.LayoutAwarePage":
                userType = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::iFixit.W8.UI.Common.LayoutAwarePage), GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_43_LayoutAwarePage;
                xamlType = userType;
                break;

            case "iFixit.UI.Shared.GuidePageSelector":
                userType = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::iFixit.UI.Shared.GuidePageSelector), GetXamlTypeByName("Windows.UI.Xaml.Controls.DataTemplateSelector"));
                userType.Activator = Activate_44_GuidePageSelector;
                userType.AddMemberName("IntroPage");
                userType.AddMemberName("StepPage");
                xamlType = userType;
                break;

            case "iFixit.UI.Shared.Properties":
                userType = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::iFixit.UI.Shared.Properties), GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.Activator = Activate_45_Properties;
                userType.AddMemberName("Html");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                xamlType = userType;
                break;

            case "iFixit.W8.UI.Views.UC.TopMenuWithSubTitle":
                userType = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::iFixit.W8.UI.Views.UC.TopMenuWithSubTitle), GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_46_TopMenuWithSubTitle;
                xamlType = userType;
                break;

            case "iFixit.W8.UI.Views.UC.ProgressBar":
                userType = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::iFixit.W8.UI.Views.UC.ProgressBar), GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_47_ProgressBar;
                xamlType = userType;
                break;

            case "iFixit.W8.UI.Views.GuideDetails":
                userType = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::iFixit.W8.UI.Views.GuideDetails), GetXamlTypeByName("iFixit.W8.UI.Common.BasePage"));
                userType.Activator = Activate_48_GuideDetails;
                xamlType = userType;
                break;

            case "iFixit.W8.UI.Views.UC.BreadCrumbCategories":
                userType = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::iFixit.W8.UI.Views.UC.BreadCrumbCategories), GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_49_BreadCrumbCategories;
                xamlType = userType;
                break;

            case "iFixit.W8.UI.Views.UC.LoadingRing":
                userType = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::iFixit.W8.UI.Views.UC.LoadingRing), GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_50_LoadingRing;
                xamlType = userType;
                break;

            case "iFixit.W8.UI.Views.UC.News":
                userType = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::iFixit.W8.UI.Views.UC.News), GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_51_News;
                xamlType = userType;
                break;

            case "iFixit.W8.UI.Views.UC.Support":
                userType = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::iFixit.W8.UI.Views.UC.Support), GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_52_Support;
                xamlType = userType;
                break;

            case "iFixit.W8.UI.Views.UC.TopMenu":
                userType = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::iFixit.W8.UI.Views.UC.TopMenu), GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_53_TopMenu;
                xamlType = userType;
                break;

            case "iFixit.UI.Shared.VariableGridView":
                userType = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::iFixit.UI.Shared.VariableGridView), GetXamlTypeByName("Windows.UI.Xaml.Controls.GridView"));
                userType.Activator = Activate_54_VariableGridView;
                userType.AddMemberName("ItemRowSpanPropertyPath");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("ItemColSpanPropertyPath");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                xamlType = userType;
                break;

            case "iFixit.W8.UI.Views.Device":
                userType = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::iFixit.W8.UI.Views.Device), GetXamlTypeByName("iFixit.W8.UI.Common.BasePage"));
                userType.Activator = Activate_55_Device;
                xamlType = userType;
                break;

            case "WinRTXamlToolkit.Controls.Extensions.GridViewExtensions":
                userType = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::WinRTXamlToolkit.Controls.Extensions.GridViewExtensions), GetXamlTypeByName("Object"));
                userType.AddMemberName("BindableSelection");
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.ObjectModel.ObservableCollection<global::System.Object>),
                                                   "System.Collections.ObjectModel.ObservableCollection<Object>");
                userType.AddMemberName("BindableSelectionHandler");
                userType.AddMemberName("ItemToBringIntoView");
                AddToMapOfTypeToStandardName(typeof(global::System.Object),
                                                   "Object");
                xamlType = userType;
                break;

            case "System.Collections.ObjectModel.ObservableCollection<Object>":
                userType = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Collections.ObjectModel.ObservableCollection<global::System.Object>), GetXamlTypeByName("System.Collections.ObjectModel.Collection<Object>"));
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.ObjectModel.ObservableCollection<global::System.Object>),
                                                   "System.Collections.ObjectModel.ObservableCollection<Object>");
                userType.Activator = Activate_57_ObservableCollection;
                userType.CollectionAdd = VectorAdd_57_ObservableCollection;
                xamlType = userType;
                break;

            case "System.Collections.ObjectModel.Collection<Object>":
                userType = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Collections.ObjectModel.Collection<global::System.Object>), GetXamlTypeByName("Object"));
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.ObjectModel.Collection<global::System.Object>),
                                                   "System.Collections.ObjectModel.Collection<Object>");
                userType.Activator = Activate_58_Collection;
                userType.CollectionAdd = VectorAdd_58_Collection;
                xamlType = userType;
                break;

            case "WinRTXamlToolkit.Controls.Extensions.GridViewBindableSelectionHandler":
                userType = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::WinRTXamlToolkit.Controls.Extensions.GridViewBindableSelectionHandler), GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case "Callisto.Effects.Tilt":
                userType = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Callisto.Effects.Tilt), GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.AddMemberName("IsTiltEnabled");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("SuppressTilt");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                xamlType = userType;
                break;

            case "iFixit.W8.UI.Views.Home":
                userType = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::iFixit.W8.UI.Views.Home), GetXamlTypeByName("iFixit.W8.UI.Common.BasePage"));
                userType.Activator = Activate_61_Home;
                xamlType = userType;
                break;

            case "iFixit.W8.UI.Views.SearchResult":
                userType = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::iFixit.W8.UI.Views.SearchResult), GetXamlTypeByName("iFixit.W8.UI.Common.BasePage"));
                userType.Activator = Activate_62_SearchResult;
                xamlType = userType;
                break;

            case "iFixit.W8.UI.Views.SubCategory":
                userType = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::iFixit.W8.UI.Views.SubCategory), GetXamlTypeByName("iFixit.W8.UI.Common.BasePage"));
                userType.Activator = Activate_63_SubCategory;
                xamlType = userType;
                break;

            case "iFixit.W8.UI.Views.UC.About":
                userType = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::iFixit.W8.UI.Views.UC.About), GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_64_About;
                xamlType = userType;
                break;

            case "WinRTXamlToolkit.Controls.WatermarkTextBox":
                userType = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::WinRTXamlToolkit.Controls.WatermarkTextBox), GetXamlTypeByName("Windows.UI.Xaml.Controls.TextBox"));
                userType.Activator = Activate_65_WatermarkTextBox;
                userType.AddMemberName("WatermarkText");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("Watermark");
                AddToMapOfTypeToStandardName(typeof(global::System.Object),
                                                   "Object");
                userType.AddMemberName("WatermarkTextStyle");
                xamlType = userType;
                break;

            case "WinRTXamlToolkit.Controls.WatermarkPasswordBox":
                userType = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::WinRTXamlToolkit.Controls.WatermarkPasswordBox), GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_66_WatermarkPasswordBox;
                userType.AddMemberName("Password");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("IsPasswordRevealButtonEnabled");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("WatermarkTextStyle");
                userType.AddMemberName("MaxLength");
                AddToMapOfTypeToStandardName(typeof(global::System.Int32),
                                                   "Int32");
                userType.AddMemberName("PasswordChar");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("WatermarkText");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("Watermark");
                AddToMapOfTypeToStandardName(typeof(global::System.Object),
                                                   "Object");
                userType.AddMemberName("WatermarkTextStyleRelay");
                xamlType = userType;
                break;

            case "iFixit.W8.UI.Views.UC.Login":
                userType = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::iFixit.W8.UI.Views.UC.Login), GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_67_Login;
                xamlType = userType;
                break;

            case "iFixit.W8.UI.Views.UC.Mission":
                userType = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::iFixit.W8.UI.Views.UC.Mission), GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_68_Mission;
                xamlType = userType;
                break;

            case "iFixit.W8.UI.Views.UC.Profile":
                userType = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::iFixit.W8.UI.Views.UC.Profile), GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_69_Profile;
                xamlType = userType;
                break;

            }
            return xamlType;
        }

        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> _otherProviders;
        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> OtherProviders
        {
            get
            {
                if(_otherProviders == null)
                {
                    _otherProviders = new global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider>();
                    global::Windows.UI.Xaml.Markup.IXamlMetadataProvider provider;
                    provider = new global::Callisto.Callisto_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    _otherProviders.Add(provider); 
                    provider = new global::Coding4Fun.Toolkit.Controls.Coding4Fun_Toolkit_Controls_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    _otherProviders.Add(provider); 
                    provider = new global::WinRTXamlToolkit.WinRTXamlToolkit_8_0_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    _otherProviders.Add(provider); 
                }
                return _otherProviders;
            }
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForName(string typeName)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(typeName);
                if(xamlType != null)
                {
                    return xamlType;
                }
            }
            return null;
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(type);
                if(xamlType != null)
                {
                    return xamlType;
                }
            }
            return null;
        }

        private object get_0_StringToVisibilityConverter_Inverted(object instance)
        {
            var that = (global::Coding4Fun.Toolkit.Controls.Converters.StringToVisibilityConverter)instance;
            return that.Inverted;
        }
        private void set_0_StringToVisibilityConverter_Inverted(object instance, object Value)
        {
            var that = (global::Coding4Fun.Toolkit.Controls.Converters.StringToVisibilityConverter)instance;
            that.Inverted = (global::System.Boolean)Value;
        }
        private object get_1_ViewModelLocator_Home(object instance)
        {
            var that = (global::iFixit.W8.UI.ViewModels.ViewModelLocator)instance;
            return that.Home;
        }
        private object get_2_ViewModelLocator_Guide(object instance)
        {
            var that = (global::iFixit.W8.UI.ViewModels.ViewModelLocator)instance;
            return that.Guide;
        }
        private object get_3_ViewModelLocator_Device(object instance)
        {
            var that = (global::iFixit.W8.UI.ViewModels.ViewModelLocator)instance;
            return that.Device;
        }
        private object get_4_ViewModelLocator_Search(object instance)
        {
            var that = (global::iFixit.W8.UI.ViewModels.ViewModelLocator)instance;
            return that.Search;
        }
        private object get_5_ViewModelLocator_About(object instance)
        {
            var that = (global::iFixit.W8.UI.ViewModels.ViewModelLocator)instance;
            return that.About;
        }
        private object get_6_ViewModelLocator_SubCategories(object instance)
        {
            var that = (global::iFixit.W8.UI.ViewModels.ViewModelLocator)instance;
            return that.SubCategories;
        }
        private object get_7_ViewModelLocator_Login(object instance)
        {
            var that = (global::iFixit.W8.UI.ViewModels.ViewModelLocator)instance;
            return that.Login;
        }
        private object get_8_ViewModelLocator_Profile(object instance)
        {
            var that = (global::iFixit.W8.UI.ViewModels.ViewModelLocator)instance;
            return that.Profile;
        }
        private object get_9_LabelsManager_Labels(object instance)
        {
            var that = (global::iFixit.Domain.Models.UI.LabelsManager)instance;
            return that.Labels;
        }
        private void set_9_LabelsManager_Labels(object instance, object Value)
        {
            var that = (global::iFixit.Domain.Models.UI.LabelsManager)instance;
            that.Labels = (global::iFixit.International.PublicInternational)Value;
        }
        private object get_10_Color_A(object instance)
        {
            var that = (global::Windows.UI.Color)instance;
            return that.A;
        }
        private void set_10_Color_A(object instance, object Value)
        {
            var that = (global::Windows.UI.Color)instance;
            that.A = (global::System.Byte)Value;
        }
        private object get_11_Color_B(object instance)
        {
            var that = (global::Windows.UI.Color)instance;
            return that.B;
        }
        private void set_11_Color_B(object instance, object Value)
        {
            var that = (global::Windows.UI.Color)instance;
            that.B = (global::System.Byte)Value;
        }
        private object get_12_Color_G(object instance)
        {
            var that = (global::Windows.UI.Color)instance;
            return that.G;
        }
        private void set_12_Color_G(object instance, object Value)
        {
            var that = (global::Windows.UI.Color)instance;
            that.G = (global::System.Byte)Value;
        }
        private object get_13_Color_R(object instance)
        {
            var that = (global::Windows.UI.Color)instance;
            return that.R;
        }
        private void set_13_Color_R(object instance, object Value)
        {
            var that = (global::Windows.UI.Color)instance;
            that.R = (global::System.Byte)Value;
        }
        private object get_14_SuperImage_PlaceholderImageStretch(object instance)
        {
            var that = (global::Coding4Fun.Toolkit.Controls.SuperImage)instance;
            return that.PlaceholderImageStretch;
        }
        private void set_14_SuperImage_PlaceholderImageStretch(object instance, object Value)
        {
            var that = (global::Coding4Fun.Toolkit.Controls.SuperImage)instance;
            that.PlaceholderImageStretch = (global::Windows.UI.Xaml.Media.Stretch)Value;
        }
        private object get_15_SuperImage_PlaceholderImageSource(object instance)
        {
            var that = (global::Coding4Fun.Toolkit.Controls.SuperImage)instance;
            return that.PlaceholderImageSource;
        }
        private void set_15_SuperImage_PlaceholderImageSource(object instance, object Value)
        {
            var that = (global::Coding4Fun.Toolkit.Controls.SuperImage)instance;
            that.PlaceholderImageSource = (global::Windows.UI.Xaml.Media.ImageSource)Value;
        }
        private object get_16_SuperImage_Source(object instance)
        {
            var that = (global::Coding4Fun.Toolkit.Controls.SuperImage)instance;
            return that.Source;
        }
        private void set_16_SuperImage_Source(object instance, object Value)
        {
            var that = (global::Coding4Fun.Toolkit.Controls.SuperImage)instance;
            that.Source = (global::Windows.UI.Xaml.Media.ImageSource)Value;
        }
        private object get_17_SuperImage_Stretch(object instance)
        {
            var that = (global::Coding4Fun.Toolkit.Controls.SuperImage)instance;
            return that.Stretch;
        }
        private void set_17_SuperImage_Stretch(object instance, object Value)
        {
            var that = (global::Coding4Fun.Toolkit.Controls.SuperImage)instance;
            that.Stretch = (global::Windows.UI.Xaml.Media.Stretch)Value;
        }
        private object get_18_SuperImage_Sources(object instance)
        {
            var that = (global::Coding4Fun.Toolkit.Controls.SuperImage)instance;
            return that.Sources;
        }
        private void set_18_SuperImage_Sources(object instance, object Value)
        {
            var that = (global::Coding4Fun.Toolkit.Controls.SuperImage)instance;
            that.Sources = (global::System.Collections.ObjectModel.ObservableCollection<global::Coding4Fun.Toolkit.Controls.SuperImageSource>)Value;
        }
        private object get_19_SuperImageSource_MinScale(object instance)
        {
            var that = (global::Coding4Fun.Toolkit.Controls.SuperImageSource)instance;
            return that.MinScale;
        }
        private void set_19_SuperImageSource_MinScale(object instance, object Value)
        {
            var that = (global::Coding4Fun.Toolkit.Controls.SuperImageSource)instance;
            that.MinScale = (global::System.Int32)Value;
        }
        private object get_20_SuperImageSource_MaxScale(object instance)
        {
            var that = (global::Coding4Fun.Toolkit.Controls.SuperImageSource)instance;
            return that.MaxScale;
        }
        private void set_20_SuperImageSource_MaxScale(object instance, object Value)
        {
            var that = (global::Coding4Fun.Toolkit.Controls.SuperImageSource)instance;
            that.MaxScale = (global::System.Int32)Value;
        }
        private object get_21_SuperImageSource_Source(object instance)
        {
            var that = (global::Coding4Fun.Toolkit.Controls.SuperImageSource)instance;
            return that.Source;
        }
        private void set_21_SuperImageSource_Source(object instance, object Value)
        {
            var that = (global::Coding4Fun.Toolkit.Controls.SuperImageSource)instance;
            that.Source = (global::Windows.UI.Xaml.Media.ImageSource)Value;
        }
        private object get_22_SuperImageSource_IsDefault(object instance)
        {
            var that = (global::Coding4Fun.Toolkit.Controls.SuperImageSource)instance;
            return that.IsDefault;
        }
        private void set_22_SuperImageSource_IsDefault(object instance, object Value)
        {
            var that = (global::Coding4Fun.Toolkit.Controls.SuperImageSource)instance;
            that.IsDefault = (global::System.Boolean)Value;
        }
        private object get_23_SuperImage_PlaceholderOpacity(object instance)
        {
            var that = (global::Coding4Fun.Toolkit.Controls.SuperImage)instance;
            return that.PlaceholderOpacity;
        }
        private void set_23_SuperImage_PlaceholderOpacity(object instance, object Value)
        {
            var that = (global::Coding4Fun.Toolkit.Controls.SuperImage)instance;
            that.PlaceholderOpacity = (global::System.Double)Value;
        }
        private object get_24_SuperImage_PlaceholderBackground(object instance)
        {
            var that = (global::Coding4Fun.Toolkit.Controls.SuperImage)instance;
            return that.PlaceholderBackground;
        }
        private void set_24_SuperImage_PlaceholderBackground(object instance, object Value)
        {
            var that = (global::Coding4Fun.Toolkit.Controls.SuperImage)instance;
            that.PlaceholderBackground = (global::Windows.UI.Xaml.Media.SolidColorBrush)Value;
        }
        private object get_25_ImageExtensions_FadeInOnLoaded(object instance)
        {
            return global::WinRTXamlToolkit.Controls.Extensions.ImageExtensions.GetFadeInOnLoaded((global::Windows.UI.Xaml.DependencyObject)instance);
        }
        private void set_25_ImageExtensions_FadeInOnLoaded(object instance, object Value)
        {
            global::WinRTXamlToolkit.Controls.Extensions.ImageExtensions.SetFadeInOnLoaded((global::Windows.UI.Xaml.DependencyObject)instance, (System.Boolean)Value);
                    }
        private object get_26_ImageExtensions_ImageLoadedTransitionType(object instance)
        {
            return global::WinRTXamlToolkit.Controls.Extensions.ImageExtensions.GetImageLoadedTransitionType((global::Windows.UI.Xaml.DependencyObject)instance);
        }
        private void set_26_ImageExtensions_ImageLoadedTransitionType(object instance, object Value)
        {
            global::WinRTXamlToolkit.Controls.Extensions.ImageExtensions.SetImageLoadedTransitionType((global::Windows.UI.Xaml.DependencyObject)instance, (WinRTXamlToolkit.Controls.Extensions.ImageLoadedTransitionTypes)Value);
                    }
        private object get_27_ImageExtensions_FadeInOnLoadedHandler(object instance)
        {
            return global::WinRTXamlToolkit.Controls.Extensions.ImageExtensions.GetFadeInOnLoadedHandler((global::Windows.UI.Xaml.DependencyObject)instance);
        }
        private void set_27_ImageExtensions_FadeInOnLoadedHandler(object instance, object Value)
        {
            global::WinRTXamlToolkit.Controls.Extensions.ImageExtensions.SetFadeInOnLoadedHandler((global::Windows.UI.Xaml.DependencyObject)instance, (WinRTXamlToolkit.Controls.Extensions.FadeInOnLoadedHandler)Value);
                    }
        private object get_28_ImageExtensions_Source(object instance)
        {
            return global::WinRTXamlToolkit.Controls.Extensions.ImageExtensions.GetSource((global::Windows.UI.Xaml.DependencyObject)instance);
        }
        private void set_28_ImageExtensions_Source(object instance, object Value)
        {
            global::WinRTXamlToolkit.Controls.Extensions.ImageExtensions.SetSource((global::Windows.UI.Xaml.DependencyObject)instance, (System.Object)Value);
                    }
        private object get_29_ImageExtensions_CustomSource(object instance)
        {
            return global::WinRTXamlToolkit.Controls.Extensions.ImageExtensions.GetCustomSource((global::Windows.UI.Xaml.DependencyObject)instance);
        }
        private void set_29_ImageExtensions_CustomSource(object instance, object Value)
        {
            global::WinRTXamlToolkit.Controls.Extensions.ImageExtensions.SetCustomSource((global::Windows.UI.Xaml.DependencyObject)instance, (System.String)Value);
                    }
        private object get_30_ImageExtensions_CacheUri(object instance)
        {
            return global::Q42.WinRT.Controls.ImageExtensions.GetCacheUri((global::Windows.UI.Xaml.DependencyObject)instance);
        }
        private void set_30_ImageExtensions_CacheUri(object instance, object Value)
        {
            global::Q42.WinRT.Controls.ImageExtensions.SetCacheUri((global::Windows.UI.Xaml.DependencyObject)instance, (System.Uri)Value);
                    }
        private object get_31_EventToCommandManager_Collection(object instance)
        {
            return global::MetroEventToCommand.EventToCommandManager.GetCollection((global::Windows.UI.Xaml.FrameworkElement)instance);
        }
        private void set_31_EventToCommandManager_Collection(object instance, object Value)
        {
            global::MetroEventToCommand.EventToCommandManager.SetCollection((global::Windows.UI.Xaml.FrameworkElement)instance, (MetroEventToCommand.EventToCommandCollection)Value);
                    }
        private object get_32_EventToCommand_Command(object instance)
        {
            var that = (global::MetroEventToCommand.EventToCommand)instance;
            return that.Command;
        }
        private void set_32_EventToCommand_Command(object instance, object Value)
        {
            var that = (global::MetroEventToCommand.EventToCommand)instance;
            that.Command = (global::System.Windows.Input.ICommand)Value;
        }
        private object get_33_EventToCommand_CommandParameter(object instance)
        {
            var that = (global::MetroEventToCommand.EventToCommand)instance;
            return that.CommandParameter;
        }
        private void set_33_EventToCommand_CommandParameter(object instance, object Value)
        {
            var that = (global::MetroEventToCommand.EventToCommand)instance;
            that.CommandParameter = (global::System.Object)Value;
        }
        private object get_34_EventToCommand_Event(object instance)
        {
            var that = (global::MetroEventToCommand.EventToCommand)instance;
            return that.Event;
        }
        private void set_34_EventToCommand_Event(object instance, object Value)
        {
            var that = (global::MetroEventToCommand.EventToCommand)instance;
            that.Event = (global::System.String)Value;
        }
        private object get_35_EventToCommand_HandleEvent(object instance)
        {
            var that = (global::MetroEventToCommand.EventToCommand)instance;
            return that.HandleEvent;
        }
        private void set_35_EventToCommand_HandleEvent(object instance, object Value)
        {
            var that = (global::MetroEventToCommand.EventToCommand)instance;
            that.HandleEvent = (global::System.Boolean)Value;
        }
        private object get_36_EventToCommand_Element(object instance)
        {
            var that = (global::MetroEventToCommand.EventToCommand)instance;
            return that.Element;
        }
        private void set_36_EventToCommand_Element(object instance, object Value)
        {
            var that = (global::MetroEventToCommand.EventToCommand)instance;
            that.Element = (global::Windows.UI.Xaml.FrameworkElement)Value;
        }
        private object get_38_GuidePageSelector_IntroPage(object instance)
        {
            var that = (global::iFixit.UI.Shared.GuidePageSelector)instance;
            return that.IntroPage;
        }
        private void set_38_GuidePageSelector_IntroPage(object instance, object Value)
        {
            var that = (global::iFixit.UI.Shared.GuidePageSelector)instance;
            that.IntroPage = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_39_GuidePageSelector_StepPage(object instance)
        {
            var that = (global::iFixit.UI.Shared.GuidePageSelector)instance;
            return that.StepPage;
        }
        private void set_39_GuidePageSelector_StepPage(object instance, object Value)
        {
            var that = (global::iFixit.UI.Shared.GuidePageSelector)instance;
            that.StepPage = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_40_Properties_Html(object instance)
        {
            return global::iFixit.UI.Shared.Properties.GetHtml((global::Windows.UI.Xaml.DependencyObject)instance);
        }
        private void set_40_Properties_Html(object instance, object Value)
        {
            global::iFixit.UI.Shared.Properties.SetHtml((global::Windows.UI.Xaml.DependencyObject)instance, (System.String)Value);
                    }
        private object get_41_VariableGridView_ItemRowSpanPropertyPath(object instance)
        {
            var that = (global::iFixit.UI.Shared.VariableGridView)instance;
            return that.ItemRowSpanPropertyPath;
        }
        private void set_41_VariableGridView_ItemRowSpanPropertyPath(object instance, object Value)
        {
            var that = (global::iFixit.UI.Shared.VariableGridView)instance;
            that.ItemRowSpanPropertyPath = (global::System.String)Value;
        }
        private object get_42_VariableGridView_ItemColSpanPropertyPath(object instance)
        {
            var that = (global::iFixit.UI.Shared.VariableGridView)instance;
            return that.ItemColSpanPropertyPath;
        }
        private void set_42_VariableGridView_ItemColSpanPropertyPath(object instance, object Value)
        {
            var that = (global::iFixit.UI.Shared.VariableGridView)instance;
            that.ItemColSpanPropertyPath = (global::System.String)Value;
        }
        private object get_43_GridViewExtensions_BindableSelection(object instance)
        {
            return global::WinRTXamlToolkit.Controls.Extensions.GridViewExtensions.GetBindableSelection((global::Windows.UI.Xaml.DependencyObject)instance);
        }
        private void set_43_GridViewExtensions_BindableSelection(object instance, object Value)
        {
            global::WinRTXamlToolkit.Controls.Extensions.GridViewExtensions.SetBindableSelection((global::Windows.UI.Xaml.DependencyObject)instance, (System.Collections.ObjectModel.ObservableCollection<global::System.Object>)Value);
                    }
        private object get_44_GridViewExtensions_BindableSelectionHandler(object instance)
        {
            return global::WinRTXamlToolkit.Controls.Extensions.GridViewExtensions.GetBindableSelectionHandler((global::Windows.UI.Xaml.DependencyObject)instance);
        }
        private void set_44_GridViewExtensions_BindableSelectionHandler(object instance, object Value)
        {
            global::WinRTXamlToolkit.Controls.Extensions.GridViewExtensions.SetBindableSelectionHandler((global::Windows.UI.Xaml.DependencyObject)instance, (WinRTXamlToolkit.Controls.Extensions.GridViewBindableSelectionHandler)Value);
                    }
        private object get_45_GridViewExtensions_ItemToBringIntoView(object instance)
        {
            return global::WinRTXamlToolkit.Controls.Extensions.GridViewExtensions.GetItemToBringIntoView((global::Windows.UI.Xaml.DependencyObject)instance);
        }
        private void set_45_GridViewExtensions_ItemToBringIntoView(object instance, object Value)
        {
            global::WinRTXamlToolkit.Controls.Extensions.GridViewExtensions.SetItemToBringIntoView((global::Windows.UI.Xaml.DependencyObject)instance, (System.Object)Value);
                    }
        private object get_46_Tilt_IsTiltEnabled(object instance)
        {
            return global::Callisto.Effects.Tilt.GetIsTiltEnabled((global::Windows.UI.Xaml.DependencyObject)instance);
        }
        private void set_46_Tilt_IsTiltEnabled(object instance, object Value)
        {
            global::Callisto.Effects.Tilt.SetIsTiltEnabled((global::Windows.UI.Xaml.DependencyObject)instance, (System.Boolean)Value);
                    }
        private object get_47_Tilt_SuppressTilt(object instance)
        {
            return global::Callisto.Effects.Tilt.GetSuppressTilt((global::Windows.UI.Xaml.DependencyObject)instance);
        }
        private void set_47_Tilt_SuppressTilt(object instance, object Value)
        {
            global::Callisto.Effects.Tilt.SetSuppressTilt((global::Windows.UI.Xaml.DependencyObject)instance, (System.Boolean)Value);
                    }
        private object get_48_WatermarkTextBox_WatermarkText(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.WatermarkTextBox)instance;
            return that.WatermarkText;
        }
        private void set_48_WatermarkTextBox_WatermarkText(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.WatermarkTextBox)instance;
            that.WatermarkText = (global::System.String)Value;
        }
        private object get_49_WatermarkTextBox_Watermark(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.WatermarkTextBox)instance;
            return that.Watermark;
        }
        private void set_49_WatermarkTextBox_Watermark(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.WatermarkTextBox)instance;
            that.Watermark = (global::System.Object)Value;
        }
        private object get_50_WatermarkTextBox_WatermarkTextStyle(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.WatermarkTextBox)instance;
            return that.WatermarkTextStyle;
        }
        private void set_50_WatermarkTextBox_WatermarkTextStyle(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.WatermarkTextBox)instance;
            that.WatermarkTextStyle = (global::Windows.UI.Xaml.Style)Value;
        }
        private object get_51_WatermarkPasswordBox_Password(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.WatermarkPasswordBox)instance;
            return that.Password;
        }
        private void set_51_WatermarkPasswordBox_Password(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.WatermarkPasswordBox)instance;
            that.Password = (global::System.String)Value;
        }
        private object get_52_WatermarkPasswordBox_IsPasswordRevealButtonEnabled(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.WatermarkPasswordBox)instance;
            return that.IsPasswordRevealButtonEnabled;
        }
        private void set_52_WatermarkPasswordBox_IsPasswordRevealButtonEnabled(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.WatermarkPasswordBox)instance;
            that.IsPasswordRevealButtonEnabled = (global::System.Boolean)Value;
        }
        private object get_53_WatermarkPasswordBox_WatermarkTextStyle(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.WatermarkPasswordBox)instance;
            return that.WatermarkTextStyle;
        }
        private void set_53_WatermarkPasswordBox_WatermarkTextStyle(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.WatermarkPasswordBox)instance;
            that.WatermarkTextStyle = (global::Windows.UI.Xaml.Style)Value;
        }
        private object get_54_WatermarkPasswordBox_MaxLength(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.WatermarkPasswordBox)instance;
            return that.MaxLength;
        }
        private void set_54_WatermarkPasswordBox_MaxLength(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.WatermarkPasswordBox)instance;
            that.MaxLength = (global::System.Int32)Value;
        }
        private object get_55_WatermarkPasswordBox_PasswordChar(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.WatermarkPasswordBox)instance;
            return that.PasswordChar;
        }
        private void set_55_WatermarkPasswordBox_PasswordChar(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.WatermarkPasswordBox)instance;
            that.PasswordChar = (global::System.String)Value;
        }
        private object get_56_WatermarkPasswordBox_WatermarkText(object instance)
        {
            return global::WinRTXamlToolkit.Controls.WatermarkPasswordBox.GetWatermarkText((global::Windows.UI.Xaml.DependencyObject)instance);
        }
        private void set_56_WatermarkPasswordBox_WatermarkText(object instance, object Value)
        {
            global::WinRTXamlToolkit.Controls.WatermarkPasswordBox.SetWatermarkText((global::Windows.UI.Xaml.DependencyObject)instance, (System.String)Value);
                    }
        private object get_57_WatermarkPasswordBox_Watermark(object instance)
        {
            return global::WinRTXamlToolkit.Controls.WatermarkPasswordBox.GetWatermark((global::Windows.UI.Xaml.DependencyObject)instance);
        }
        private void set_57_WatermarkPasswordBox_Watermark(object instance, object Value)
        {
            global::WinRTXamlToolkit.Controls.WatermarkPasswordBox.SetWatermark((global::Windows.UI.Xaml.DependencyObject)instance, (System.Object)Value);
                    }
        private object get_58_WatermarkPasswordBox_WatermarkTextStyleRelay(object instance)
        {
            return global::WinRTXamlToolkit.Controls.WatermarkPasswordBox.GetWatermarkTextStyleRelay((global::Windows.UI.Xaml.DependencyObject)instance);
        }
        private void set_58_WatermarkPasswordBox_WatermarkTextStyleRelay(object instance, object Value)
        {
            global::WinRTXamlToolkit.Controls.WatermarkPasswordBox.SetWatermarkTextStyleRelay((global::Windows.UI.Xaml.DependencyObject)instance, (Windows.UI.Xaml.Style)Value);
                    }

        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlMember xamlMember = null;
            global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "Coding4Fun.Toolkit.Controls.Converters.StringToVisibilityConverter.Inverted":
                userType = (global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Coding4Fun.Toolkit.Controls.Converters.StringToVisibilityConverter");
                xamlMember = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlMember(this, "Inverted", "Boolean");
                xamlMember.Getter = get_0_StringToVisibilityConverter_Inverted;
                xamlMember.Setter = set_0_StringToVisibilityConverter_Inverted;
                break;
            case "iFixit.W8.UI.ViewModels.ViewModelLocator.Home":
                userType = (global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("iFixit.W8.UI.ViewModels.ViewModelLocator");
                xamlMember = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlMember(this, "Home", "iFixit.Domain.ViewModels.Home");
                xamlMember.Getter = get_1_ViewModelLocator_Home;
                xamlMember.SetIsReadOnly();
                break;
            case "iFixit.W8.UI.ViewModels.ViewModelLocator.Guide":
                userType = (global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("iFixit.W8.UI.ViewModels.ViewModelLocator");
                xamlMember = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlMember(this, "Guide", "iFixit.Domain.ViewModels.Guide");
                xamlMember.Getter = get_2_ViewModelLocator_Guide;
                xamlMember.SetIsReadOnly();
                break;
            case "iFixit.W8.UI.ViewModels.ViewModelLocator.Device":
                userType = (global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("iFixit.W8.UI.ViewModels.ViewModelLocator");
                xamlMember = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlMember(this, "Device", "iFixit.Domain.ViewModels.Device");
                xamlMember.Getter = get_3_ViewModelLocator_Device;
                xamlMember.SetIsReadOnly();
                break;
            case "iFixit.W8.UI.ViewModels.ViewModelLocator.Search":
                userType = (global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("iFixit.W8.UI.ViewModels.ViewModelLocator");
                xamlMember = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlMember(this, "Search", "iFixit.Domain.ViewModels.Search");
                xamlMember.Getter = get_4_ViewModelLocator_Search;
                xamlMember.SetIsReadOnly();
                break;
            case "iFixit.W8.UI.ViewModels.ViewModelLocator.About":
                userType = (global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("iFixit.W8.UI.ViewModels.ViewModelLocator");
                xamlMember = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlMember(this, "About", "iFixit.Domain.ViewModels.About");
                xamlMember.Getter = get_5_ViewModelLocator_About;
                xamlMember.SetIsReadOnly();
                break;
            case "iFixit.W8.UI.ViewModels.ViewModelLocator.SubCategories":
                userType = (global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("iFixit.W8.UI.ViewModels.ViewModelLocator");
                xamlMember = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlMember(this, "SubCategories", "iFixit.Domain.ViewModels.SubCategories");
                xamlMember.Getter = get_6_ViewModelLocator_SubCategories;
                xamlMember.SetIsReadOnly();
                break;
            case "iFixit.W8.UI.ViewModels.ViewModelLocator.Login":
                userType = (global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("iFixit.W8.UI.ViewModels.ViewModelLocator");
                xamlMember = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlMember(this, "Login", "iFixit.Domain.ViewModels.Login");
                xamlMember.Getter = get_7_ViewModelLocator_Login;
                xamlMember.SetIsReadOnly();
                break;
            case "iFixit.W8.UI.ViewModels.ViewModelLocator.Profile":
                userType = (global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("iFixit.W8.UI.ViewModels.ViewModelLocator");
                xamlMember = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlMember(this, "Profile", "iFixit.Domain.ViewModels.Profile");
                xamlMember.Getter = get_8_ViewModelLocator_Profile;
                xamlMember.SetIsReadOnly();
                break;
            case "iFixit.Domain.Models.UI.LabelsManager.Labels":
                userType = (global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("iFixit.Domain.Models.UI.LabelsManager");
                xamlMember = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlMember(this, "Labels", "iFixit.International.PublicInternational");
                xamlMember.Getter = get_9_LabelsManager_Labels;
                xamlMember.Setter = set_9_LabelsManager_Labels;
                break;
            case "Windows.UI.Color.A":
                userType = (global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Color");
                xamlMember = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlMember(this, "A", "Byte");
                xamlMember.Getter = get_10_Color_A;
                xamlMember.Setter = set_10_Color_A;
                break;
            case "Windows.UI.Color.B":
                userType = (global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Color");
                xamlMember = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlMember(this, "B", "Byte");
                xamlMember.Getter = get_11_Color_B;
                xamlMember.Setter = set_11_Color_B;
                break;
            case "Windows.UI.Color.G":
                userType = (global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Color");
                xamlMember = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlMember(this, "G", "Byte");
                xamlMember.Getter = get_12_Color_G;
                xamlMember.Setter = set_12_Color_G;
                break;
            case "Windows.UI.Color.R":
                userType = (global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Color");
                xamlMember = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlMember(this, "R", "Byte");
                xamlMember.Getter = get_13_Color_R;
                xamlMember.Setter = set_13_Color_R;
                break;
            case "Coding4Fun.Toolkit.Controls.SuperImage.PlaceholderImageStretch":
                userType = (global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Coding4Fun.Toolkit.Controls.SuperImage");
                xamlMember = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlMember(this, "PlaceholderImageStretch", "Windows.UI.Xaml.Media.Stretch");
                xamlMember.Getter = get_14_SuperImage_PlaceholderImageStretch;
                xamlMember.Setter = set_14_SuperImage_PlaceholderImageStretch;
                break;
            case "Coding4Fun.Toolkit.Controls.SuperImage.PlaceholderImageSource":
                userType = (global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Coding4Fun.Toolkit.Controls.SuperImage");
                xamlMember = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlMember(this, "PlaceholderImageSource", "Windows.UI.Xaml.Media.ImageSource");
                xamlMember.Getter = get_15_SuperImage_PlaceholderImageSource;
                xamlMember.Setter = set_15_SuperImage_PlaceholderImageSource;
                break;
            case "Coding4Fun.Toolkit.Controls.SuperImage.Source":
                userType = (global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Coding4Fun.Toolkit.Controls.SuperImage");
                xamlMember = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlMember(this, "Source", "Windows.UI.Xaml.Media.ImageSource");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_16_SuperImage_Source;
                xamlMember.Setter = set_16_SuperImage_Source;
                break;
            case "Coding4Fun.Toolkit.Controls.SuperImage.Stretch":
                userType = (global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Coding4Fun.Toolkit.Controls.SuperImage");
                xamlMember = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlMember(this, "Stretch", "Windows.UI.Xaml.Media.Stretch");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_17_SuperImage_Stretch;
                xamlMember.Setter = set_17_SuperImage_Stretch;
                break;
            case "Coding4Fun.Toolkit.Controls.SuperImage.Sources":
                userType = (global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Coding4Fun.Toolkit.Controls.SuperImage");
                xamlMember = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlMember(this, "Sources", "System.Collections.ObjectModel.ObservableCollection<Coding4Fun.Toolkit.Controls.SuperImageSource>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_18_SuperImage_Sources;
                xamlMember.Setter = set_18_SuperImage_Sources;
                break;
            case "Coding4Fun.Toolkit.Controls.SuperImageSource.MinScale":
                userType = (global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Coding4Fun.Toolkit.Controls.SuperImageSource");
                xamlMember = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlMember(this, "MinScale", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_19_SuperImageSource_MinScale;
                xamlMember.Setter = set_19_SuperImageSource_MinScale;
                break;
            case "Coding4Fun.Toolkit.Controls.SuperImageSource.MaxScale":
                userType = (global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Coding4Fun.Toolkit.Controls.SuperImageSource");
                xamlMember = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlMember(this, "MaxScale", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_20_SuperImageSource_MaxScale;
                xamlMember.Setter = set_20_SuperImageSource_MaxScale;
                break;
            case "Coding4Fun.Toolkit.Controls.SuperImageSource.Source":
                userType = (global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Coding4Fun.Toolkit.Controls.SuperImageSource");
                xamlMember = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlMember(this, "Source", "Windows.UI.Xaml.Media.ImageSource");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_21_SuperImageSource_Source;
                xamlMember.Setter = set_21_SuperImageSource_Source;
                break;
            case "Coding4Fun.Toolkit.Controls.SuperImageSource.IsDefault":
                userType = (global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Coding4Fun.Toolkit.Controls.SuperImageSource");
                xamlMember = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlMember(this, "IsDefault", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_22_SuperImageSource_IsDefault;
                xamlMember.Setter = set_22_SuperImageSource_IsDefault;
                break;
            case "Coding4Fun.Toolkit.Controls.SuperImage.PlaceholderOpacity":
                userType = (global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Coding4Fun.Toolkit.Controls.SuperImage");
                xamlMember = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlMember(this, "PlaceholderOpacity", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_23_SuperImage_PlaceholderOpacity;
                xamlMember.Setter = set_23_SuperImage_PlaceholderOpacity;
                break;
            case "Coding4Fun.Toolkit.Controls.SuperImage.PlaceholderBackground":
                userType = (global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Coding4Fun.Toolkit.Controls.SuperImage");
                xamlMember = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlMember(this, "PlaceholderBackground", "Windows.UI.Xaml.Media.SolidColorBrush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_24_SuperImage_PlaceholderBackground;
                xamlMember.Setter = set_24_SuperImage_PlaceholderBackground;
                break;
            case "WinRTXamlToolkit.Controls.Extensions.ImageExtensions.FadeInOnLoaded":
                userType = (global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.Extensions.ImageExtensions");
                xamlMember = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlMember(this, "FadeInOnLoaded", "Boolean");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.DependencyObject");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_25_ImageExtensions_FadeInOnLoaded;
                xamlMember.Setter = set_25_ImageExtensions_FadeInOnLoaded;
                break;
            case "WinRTXamlToolkit.Controls.Extensions.ImageExtensions.ImageLoadedTransitionType":
                userType = (global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.Extensions.ImageExtensions");
                xamlMember = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlMember(this, "ImageLoadedTransitionType", "WinRTXamlToolkit.Controls.Extensions.ImageLoadedTransitionTypes");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.DependencyObject");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_26_ImageExtensions_ImageLoadedTransitionType;
                xamlMember.Setter = set_26_ImageExtensions_ImageLoadedTransitionType;
                break;
            case "WinRTXamlToolkit.Controls.Extensions.ImageExtensions.FadeInOnLoadedHandler":
                userType = (global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.Extensions.ImageExtensions");
                xamlMember = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlMember(this, "FadeInOnLoadedHandler", "WinRTXamlToolkit.Controls.Extensions.FadeInOnLoadedHandler");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.DependencyObject");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_27_ImageExtensions_FadeInOnLoadedHandler;
                xamlMember.Setter = set_27_ImageExtensions_FadeInOnLoadedHandler;
                break;
            case "WinRTXamlToolkit.Controls.Extensions.ImageExtensions.Source":
                userType = (global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.Extensions.ImageExtensions");
                xamlMember = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlMember(this, "Source", "Object");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.DependencyObject");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_28_ImageExtensions_Source;
                xamlMember.Setter = set_28_ImageExtensions_Source;
                break;
            case "WinRTXamlToolkit.Controls.Extensions.ImageExtensions.CustomSource":
                userType = (global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.Extensions.ImageExtensions");
                xamlMember = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlMember(this, "CustomSource", "String");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.DependencyObject");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_29_ImageExtensions_CustomSource;
                xamlMember.Setter = set_29_ImageExtensions_CustomSource;
                break;
            case "Q42.WinRT.Controls.ImageExtensions.CacheUri":
                userType = (global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Q42.WinRT.Controls.ImageExtensions");
                xamlMember = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlMember(this, "CacheUri", "System.Uri");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.DependencyObject");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_30_ImageExtensions_CacheUri;
                xamlMember.Setter = set_30_ImageExtensions_CacheUri;
                break;
            case "MetroEventToCommand.EventToCommandManager.Collection":
                userType = (global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MetroEventToCommand.EventToCommandManager");
                xamlMember = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlMember(this, "Collection", "MetroEventToCommand.EventToCommandCollection");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.FrameworkElement");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_31_EventToCommandManager_Collection;
                xamlMember.Setter = set_31_EventToCommandManager_Collection;
                break;
            case "MetroEventToCommand.EventToCommand.Command":
                userType = (global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MetroEventToCommand.EventToCommand");
                xamlMember = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlMember(this, "Command", "System.Windows.Input.ICommand");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_32_EventToCommand_Command;
                xamlMember.Setter = set_32_EventToCommand_Command;
                break;
            case "MetroEventToCommand.EventToCommand.CommandParameter":
                userType = (global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MetroEventToCommand.EventToCommand");
                xamlMember = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlMember(this, "CommandParameter", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_33_EventToCommand_CommandParameter;
                xamlMember.Setter = set_33_EventToCommand_CommandParameter;
                break;
            case "MetroEventToCommand.EventToCommand.Event":
                userType = (global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MetroEventToCommand.EventToCommand");
                xamlMember = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlMember(this, "Event", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_34_EventToCommand_Event;
                xamlMember.Setter = set_34_EventToCommand_Event;
                break;
            case "MetroEventToCommand.EventToCommand.HandleEvent":
                userType = (global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MetroEventToCommand.EventToCommand");
                xamlMember = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlMember(this, "HandleEvent", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_35_EventToCommand_HandleEvent;
                xamlMember.Setter = set_35_EventToCommand_HandleEvent;
                break;
            case "MetroEventToCommand.EventToCommand.Element":
                userType = (global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MetroEventToCommand.EventToCommand");
                xamlMember = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlMember(this, "Element", "Windows.UI.Xaml.FrameworkElement");
                xamlMember.Getter = get_36_EventToCommand_Element;
                xamlMember.Setter = set_36_EventToCommand_Element;
                break;
            case "MetroEventToCommand.EventToCommandManager.CollectionPropertyInternal":
                userType = (global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MetroEventToCommand.EventToCommandManager");
                xamlMember = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlMember(this, "CollectionPropertyInternal", "MetroEventToCommand.EventToCommandCollection");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.FrameworkElement");
                xamlMember.SetIsAttachable();
                break;
            case "iFixit.UI.Shared.GuidePageSelector.IntroPage":
                userType = (global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("iFixit.UI.Shared.GuidePageSelector");
                xamlMember = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlMember(this, "IntroPage", "Windows.UI.Xaml.DataTemplate");
                xamlMember.Getter = get_38_GuidePageSelector_IntroPage;
                xamlMember.Setter = set_38_GuidePageSelector_IntroPage;
                break;
            case "iFixit.UI.Shared.GuidePageSelector.StepPage":
                userType = (global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("iFixit.UI.Shared.GuidePageSelector");
                xamlMember = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlMember(this, "StepPage", "Windows.UI.Xaml.DataTemplate");
                xamlMember.Getter = get_39_GuidePageSelector_StepPage;
                xamlMember.Setter = set_39_GuidePageSelector_StepPage;
                break;
            case "iFixit.UI.Shared.Properties.Html":
                userType = (global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("iFixit.UI.Shared.Properties");
                xamlMember = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlMember(this, "Html", "String");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.DependencyObject");
                xamlMember.SetIsDependencyProperty();
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_40_Properties_Html;
                xamlMember.Setter = set_40_Properties_Html;
                break;
            case "iFixit.UI.Shared.VariableGridView.ItemRowSpanPropertyPath":
                userType = (global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("iFixit.UI.Shared.VariableGridView");
                xamlMember = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlMember(this, "ItemRowSpanPropertyPath", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_41_VariableGridView_ItemRowSpanPropertyPath;
                xamlMember.Setter = set_41_VariableGridView_ItemRowSpanPropertyPath;
                break;
            case "iFixit.UI.Shared.VariableGridView.ItemColSpanPropertyPath":
                userType = (global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("iFixit.UI.Shared.VariableGridView");
                xamlMember = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlMember(this, "ItemColSpanPropertyPath", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_42_VariableGridView_ItemColSpanPropertyPath;
                xamlMember.Setter = set_42_VariableGridView_ItemColSpanPropertyPath;
                break;
            case "WinRTXamlToolkit.Controls.Extensions.GridViewExtensions.BindableSelection":
                userType = (global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.Extensions.GridViewExtensions");
                xamlMember = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlMember(this, "BindableSelection", "System.Collections.ObjectModel.ObservableCollection<Object>");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.DependencyObject");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_43_GridViewExtensions_BindableSelection;
                xamlMember.Setter = set_43_GridViewExtensions_BindableSelection;
                break;
            case "WinRTXamlToolkit.Controls.Extensions.GridViewExtensions.BindableSelectionHandler":
                userType = (global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.Extensions.GridViewExtensions");
                xamlMember = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlMember(this, "BindableSelectionHandler", "WinRTXamlToolkit.Controls.Extensions.GridViewBindableSelectionHandler");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.DependencyObject");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_44_GridViewExtensions_BindableSelectionHandler;
                xamlMember.Setter = set_44_GridViewExtensions_BindableSelectionHandler;
                break;
            case "WinRTXamlToolkit.Controls.Extensions.GridViewExtensions.ItemToBringIntoView":
                userType = (global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.Extensions.GridViewExtensions");
                xamlMember = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlMember(this, "ItemToBringIntoView", "Object");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.DependencyObject");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_45_GridViewExtensions_ItemToBringIntoView;
                xamlMember.Setter = set_45_GridViewExtensions_ItemToBringIntoView;
                break;
            case "Callisto.Effects.Tilt.IsTiltEnabled":
                userType = (global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Callisto.Effects.Tilt");
                xamlMember = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlMember(this, "IsTiltEnabled", "Boolean");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.DependencyObject");
                xamlMember.SetIsDependencyProperty();
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_46_Tilt_IsTiltEnabled;
                xamlMember.Setter = set_46_Tilt_IsTiltEnabled;
                break;
            case "Callisto.Effects.Tilt.SuppressTilt":
                userType = (global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Callisto.Effects.Tilt");
                xamlMember = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlMember(this, "SuppressTilt", "Boolean");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.DependencyObject");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_47_Tilt_SuppressTilt;
                xamlMember.Setter = set_47_Tilt_SuppressTilt;
                break;
            case "WinRTXamlToolkit.Controls.WatermarkTextBox.WatermarkText":
                userType = (global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.WatermarkTextBox");
                xamlMember = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlMember(this, "WatermarkText", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_48_WatermarkTextBox_WatermarkText;
                xamlMember.Setter = set_48_WatermarkTextBox_WatermarkText;
                break;
            case "WinRTXamlToolkit.Controls.WatermarkTextBox.Watermark":
                userType = (global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.WatermarkTextBox");
                xamlMember = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlMember(this, "Watermark", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_49_WatermarkTextBox_Watermark;
                xamlMember.Setter = set_49_WatermarkTextBox_Watermark;
                break;
            case "WinRTXamlToolkit.Controls.WatermarkTextBox.WatermarkTextStyle":
                userType = (global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.WatermarkTextBox");
                xamlMember = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlMember(this, "WatermarkTextStyle", "Windows.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_50_WatermarkTextBox_WatermarkTextStyle;
                xamlMember.Setter = set_50_WatermarkTextBox_WatermarkTextStyle;
                break;
            case "WinRTXamlToolkit.Controls.WatermarkPasswordBox.Password":
                userType = (global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.WatermarkPasswordBox");
                xamlMember = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlMember(this, "Password", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_51_WatermarkPasswordBox_Password;
                xamlMember.Setter = set_51_WatermarkPasswordBox_Password;
                break;
            case "WinRTXamlToolkit.Controls.WatermarkPasswordBox.IsPasswordRevealButtonEnabled":
                userType = (global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.WatermarkPasswordBox");
                xamlMember = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlMember(this, "IsPasswordRevealButtonEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_52_WatermarkPasswordBox_IsPasswordRevealButtonEnabled;
                xamlMember.Setter = set_52_WatermarkPasswordBox_IsPasswordRevealButtonEnabled;
                break;
            case "WinRTXamlToolkit.Controls.WatermarkPasswordBox.WatermarkTextStyle":
                userType = (global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.WatermarkPasswordBox");
                xamlMember = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlMember(this, "WatermarkTextStyle", "Windows.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_53_WatermarkPasswordBox_WatermarkTextStyle;
                xamlMember.Setter = set_53_WatermarkPasswordBox_WatermarkTextStyle;
                break;
            case "WinRTXamlToolkit.Controls.WatermarkPasswordBox.MaxLength":
                userType = (global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.WatermarkPasswordBox");
                xamlMember = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlMember(this, "MaxLength", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_54_WatermarkPasswordBox_MaxLength;
                xamlMember.Setter = set_54_WatermarkPasswordBox_MaxLength;
                break;
            case "WinRTXamlToolkit.Controls.WatermarkPasswordBox.PasswordChar":
                userType = (global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.WatermarkPasswordBox");
                xamlMember = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlMember(this, "PasswordChar", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_55_WatermarkPasswordBox_PasswordChar;
                xamlMember.Setter = set_55_WatermarkPasswordBox_PasswordChar;
                break;
            case "WinRTXamlToolkit.Controls.WatermarkPasswordBox.WatermarkText":
                userType = (global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.WatermarkPasswordBox");
                xamlMember = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlMember(this, "WatermarkText", "String");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.DependencyObject");
                xamlMember.SetIsDependencyProperty();
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_56_WatermarkPasswordBox_WatermarkText;
                xamlMember.Setter = set_56_WatermarkPasswordBox_WatermarkText;
                break;
            case "WinRTXamlToolkit.Controls.WatermarkPasswordBox.Watermark":
                userType = (global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.WatermarkPasswordBox");
                xamlMember = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlMember(this, "Watermark", "Object");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.DependencyObject");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_57_WatermarkPasswordBox_Watermark;
                xamlMember.Setter = set_57_WatermarkPasswordBox_Watermark;
                break;
            case "WinRTXamlToolkit.Controls.WatermarkPasswordBox.WatermarkTextStyleRelay":
                userType = (global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.WatermarkPasswordBox");
                xamlMember = new global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlMember(this, "WatermarkTextStyleRelay", "Windows.UI.Xaml.Style");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.DependencyObject");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_58_WatermarkPasswordBox_WatermarkTextStyleRelay;
                xamlMember.Setter = set_58_WatermarkPasswordBox_WatermarkTextStyleRelay;
                break;
            }
            return xamlMember;
        }

    }

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(global::System.String input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlSystemBaseType
    {
        global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public global::System.Object CreateFromString(global::System.String input)
        {
            if (_enumValues != null)
            {
                global::System.Int32 value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    global::System.Int32 enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( global::System.String.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::iFixit.W8.UI.iFixit_W8_UI_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(global::System.String targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}


